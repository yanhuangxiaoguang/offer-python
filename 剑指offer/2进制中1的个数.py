# -*- coding: utf-8 -*-
"""
题目描述：输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。

背景知识：二进制，二进制的补码，python的位操作。
"""
"""
1、机器数
一个数在计算机中的二进制表示形式,  叫做这个数的机器数。机器数是带符号的，在计算机用一个数的最高位存放符号, 正数为0,
负数为1.比如，十进制中的数 +3 ，计算机字长为8位，转换成二进制就是00000011。如果是 -3 ，就是 10000011 。
那么，这里的 00000011 和 10000011 就是机器数。
2、真值
因为第一位是符号位，所以机器数的形式值就不等于真正的数值。例如上面的有符号数 10000011，其最高位1代表负，其真正数值是 -3
而不是形式值131（10000011转换成十进制等于131）。所以，为区别起见，将带符号位的机器数对应的真正数值称为机器数的真值。
例：0000 0001的真值 = +000 0001 = +1，1000 0001的真值 = –000 0001 = –1

1. 原码
原码就是符号位加上真值的绝对值, 即用第一位表示符号, 其余位表示值. 比如如果是8位二进制:
[+1]原 = 0000 0001
[-1]原 = 1000 0001
8位二进制数的取值范围就是:[1111 1111 , 0111 1111]即[-127 , 127]
2. 反码
正数的反码是其本身,负数的反码是在其原码的基础上, 符号位不变，其余各个位取反.
[+1] = [00000001]原 = [00000001]反
[-1] = [10000001]原 = [11111110]反
3. 补码
补码的表示方法是:
正数的补码就是其本身,负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1. (即在反码的基础上+1)
[+1] = [00000001]原 = [00000001]反 = [00000001]补
[-1] = [10000001]原 = [11111110]反 = [11111111]补
可见如果一个反码表示的是负数, 人脑无法直观的看出来它的数值. 通常要将其转换成原码再计算.
参考 https://www.cnblogs.com/zhangziqiu/archive/2011/03/30/computercode.html 上面还有更详细的解释

python 位操作符，& | ^ ~ <<  >>具体代表上面，请自行查资料。
解题思路(胡说)：正数简单，负数先得到补码（python）。可以通过%2 取余，再向右移一位，然后重复，例如 5 ，二进制表示101，
5 %2 = 1 （num+1）
5 >> 1 = 2 
2 % 2 = 0
2 >> 1 = 1
1 % 2 = 1 (num +1)
1 >> 1 = 0
end
注：Python里对负数的二进制表示没有所谓的Overflow，即没有位数限制，因此也就无所谓补码，因为补码都是相对于位数来说的，
32位补码和16位补码就不同，记住python 中负数的 32补码计算公式为  n & 0xffffffff
"""

class Solution:
    def NumberOf1(self, n):
        count = 0
        if n < 0 :
            n = n & 0xffffffff
        while n > 0:
            if (n % 2) == 1:
                count += 1
            n = n >> 1
        return count
    '''方法2'''
    def NumberOf2(self, n):
        count = 0
        if n < 0:
            n = n & 0xffffffff
        while n:
            count += 1
            n = (n - 1) & n
        return count
    '''方法3'''
    def NumberOf3(self, n):
        if n < 0:
            s = bin(n & 0xffffffff)
        else:
            s = bin(n)
        return s.count('1')

'''用例'''
data = [-5, 0, 5]

'''测试'''
s = Solution()
for i in range(len(data)):
    print(s.NumberOf1(data[i]))
    print(s.NumberOf2(data[i]))
    print(s.NumberOf3(data[i]))